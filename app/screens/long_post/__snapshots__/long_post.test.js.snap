// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LongPost should match snapshot 1`] = `
LongPost {
  "context": Object {
    "intl": Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    },
  },
  "goToThread": [Function],
  "handleClose": [Function],
  "handlePress": [Function],
  "navigationEventListener": undefined,
  "props": Object {
    "actions": Object {
      "loadThreadIfNecessary": [MockFunction],
      "selectPost": [MockFunction],
    },
    "intl": Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    },
    "isLandscape": false,
    "postId": "post-id",
    "theme": Object {
      "awayIndicator": "#ffbc42",
      "buttonBg": "#166de0",
      "buttonColor": "#ffffff",
      "centerChannelBg": "#ffffff",
      "centerChannelColor": "#3d3c40",
      "codeTheme": "github",
      "dndIndicator": "#f74343",
      "errorTextColor": "#fd5960",
      "linkColor": "#2389d7",
      "mentionBg": "#ffffff",
      "mentionBj": "#ffffff",
      "mentionColor": "#145dbf",
      "mentionHighlightBg": "#ffe577",
      "mentionHighlightLink": "#166de0",
      "newMessageSeparator": "#ff8800",
      "onlineIndicator": "#06d6a0",
      "sidebarBg": "#145dbf",
      "sidebarHeaderBg": "#1153ab",
      "sidebarHeaderTextColor": "#ffffff",
      "sidebarText": "#ffffff",
      "sidebarTextActiveBorder": "#579eff",
      "sidebarTextActiveColor": "#ffffff",
      "sidebarTextHoverBg": "#4578bf",
      "sidebarUnreadText": "#ffffff",
      "type": "Mattermost",
    },
  },
  "refs": Object {},
  "setState": [Function],
  "setViewRef": [Function],
  "state": null,
  "updater": Updater {
    "_callbacks": Array [],
    "_renderer": ReactShallowRenderer {
      "_context": Object {
        "intl": Object {
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "formatDate": [Function],
          "formatHTMLMessage": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatPlural": [Function],
          "formatRelative": [Function],
          "formatTime": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralFormat": [Function],
            "getRelativeFormat": [Function],
          },
          "locale": "en",
          "messages": Object {},
          "now": [Function],
          "onError": [Function],
          "textComponent": "span",
          "timeZone": null,
        },
      },
      "_didScheduleRenderPhaseUpdate": false,
      "_dispatcher": Object {
        "readContext": [Function],
        "useCallback": [Function],
        "useContext": [Function],
        "useDebugValue": [Function],
        "useDeferredValue": [Function],
        "useEffect": [Function],
        "useImperativeHandle": [Function],
        "useLayoutEffect": [Function],
        "useMemo": [Function],
        "useReducer": [Function],
        "useRef": [Function],
        "useResponder": [Function],
        "useState": [Function],
        "useTransition": [Function],
      },
      "_element": <LongPost
        actions={
          Object {
            "loadThreadIfNecessary": [MockFunction],
            "selectPost": [MockFunction],
          }
        }
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatHTMLMessage": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatPlural": [Function],
            "formatRelative": [Function],
            "formatTime": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralFormat": [Function],
              "getRelativeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "now": [Function],
            "onError": [Function],
            "textComponent": "span",
            "timeZone": null,
          }
        }
        isLandscape={false}
        postId="post-id"
        theme={
          Object {
            "awayIndicator": "#ffbc42",
            "buttonBg": "#166de0",
            "buttonColor": "#ffffff",
            "centerChannelBg": "#ffffff",
            "centerChannelColor": "#3d3c40",
            "codeTheme": "github",
            "dndIndicator": "#f74343",
            "errorTextColor": "#fd5960",
            "linkColor": "#2389d7",
            "mentionBg": "#ffffff",
            "mentionBj": "#ffffff",
            "mentionColor": "#145dbf",
            "mentionHighlightBg": "#ffe577",
            "mentionHighlightLink": "#166de0",
            "newMessageSeparator": "#ff8800",
            "onlineIndicator": "#06d6a0",
            "sidebarBg": "#145dbf",
            "sidebarHeaderBg": "#1153ab",
            "sidebarHeaderTextColor": "#ffffff",
            "sidebarText": "#ffffff",
            "sidebarTextActiveBorder": "#579eff",
            "sidebarTextActiveColor": "#ffffff",
            "sidebarTextHoverBg": "#4578bf",
            "sidebarUnreadText": "#ffffff",
            "type": "Mattermost",
          }
        }
      />,
      "_firstWorkInProgressHook": null,
      "_forcedUpdate": false,
      "_instance": [Circular],
      "_isReRender": false,
      "_newState": null,
      "_numberOfReRenders": 0,
      "_renderPhaseUpdates": null,
      "_rendered": <Connect(SafeAreaIos)
        backgroundColor="transparent"
        excludeHeader={true}
        footerColor="transparent"
        forceTop={44}
      >
        <View
          style={
            Array [
              Object {
                "flex": 1,
                "marginTop": 20,
              },
              null,
            ]
          }
        >
          <withAnimatable(View)
            animation="zoomIn"
            delay={0}
            direction="normal"
            duration={200}
            iterationCount={1}
            iterationDelay={0}
            onAnimationBegin={[Function]}
            onAnimationEnd={[Function]}
            onTransitionBegin={[Function]}
            onTransitionEnd={[Function]}
            style={
              Object {
                "backgroundColor": "#ffffff",
                "borderRadius": 6,
                "flex": 1,
                "margin": 10,
                "opacity": 0,
              }
            }
            useNativeDriver={true}
          >
            <View
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#ffffff",
                  "borderBottomColor": "rgba(61,60,64,0.2)",
                  "borderBottomWidth": 1,
                  "borderTopLeftRadius": 6,
                  "borderTopRightRadius": 6,
                  "flexDirection": "row",
                  "height": 44,
                  "paddingRight": 16,
                  "width": "100%",
                }
              }
            >
              <TouchableOpacity
                activeOpacity={0.2}
                onPress={[Function]}
                style={
                  Object {
                    "height": 44,
                    "justifyContent": "center",
                    "paddingLeft": 7,
                    "width": 40,
                  }
                }
              >
                <Icon
                  allowFontScaling={false}
                  color="#3d3c40"
                  name="close"
                  size={20}
                />
              </TouchableOpacity>
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "flex": 1,
                    "paddingRight": 40,
                  }
                }
              >
                <FormattedText
                  defaultMessage="{channelName} - Post"
                  ellipsizeMode="tail"
                  id="mobile.long_post_title"
                  numberOfLines={1}
                  style={
                    Object {
                      "color": "#3d3c40",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                  values={
                    Object {
                      "channelName": undefined,
                    }
                  }
                />
              </View>
            </View>
            <ScrollView
              style={
                Object {
                  "backgroundColor": "#ffffff",
                  "flex": 1,
                }
              }
            >
              <Connect(Post)
                isSearchResult={false}
                onPress={[Function]}
                postId="post-id"
                shouldRenderReplyButton={false}
                showAddReaction={false}
                showLongPost={true}
              />
            </ScrollView>
            <View
              style={
                Object {
                  "alignItems": "flex-start",
                  "backgroundColor": "#ffffff",
                  "borderBottomColor": "rgba(61,60,64,0.2)",
                  "borderBottomLeftRadius": 6,
                  "borderBottomRightRadius": 6,
                  "borderBottomWidth": 1,
                  "flexDirection": "column",
                  "justifyContent": "center",
                  "marginBottom": 10,
                  "paddingLeft": 16,
                }
              }
            />
          </withAnimatable(View)>
        </View>
      </Connect(SafeAreaIos)>,
      "_rendering": false,
      "_updater": [Circular],
      "_workInProgressHook": null,
    },
  },
}
`;
